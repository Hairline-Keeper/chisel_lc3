package LC3

import chisel3._
import chisel3.util._

class signalEntry extends Bundle {
  val LD_MAR      = Bool()
  val LD_MDR      = Bool()
  val LD_IR       = Bool()
  val LD_BEN      = Bool()
  val LD_REG      = Bool()
  val LD_CC       = Bool()
  val LD_PC       = Bool()
  val LD_PRIV     = Bool()
  val LD_SAVEDSSP = Bool()
  val LD_SAVEDUSP = Bool()
  val LD_VECTOR   = Bool()
  val GATE_PC     = Bool()
  val GATE_MDR    = Bool()
  val GATE_ALU    = Bool()
  val GATE_MARMUX = Bool()
  val GATE_VECTOR = Bool()
  val GATE_PC1    = Bool()
  val GATE_PSR    = Bool()
  val GATE_SP     = Bool()
  val PC_MUX      = UInt(2.W)
  val DR_MUX      = UInt(2.W)
  val SR1_MUX     = UInt(2.W)
  val ADDR1_MUX   = Bool()
  val ADDR2_MUX   = UInt(2.W)
  val SP_MUX      = UInt(2.W)
  val MAR_MUX     = Bool()
  val VECTOR_MUX  = UInt(2.W)
  val PSR_MUX     = Bool()
  val ALUK        = UInt(2.W)
  val MIO_EN      = Bool()
  val R_W         = Bool()
  val SET_PRIV    = Bool()
}


class Controller extends Module {
  val io = IO(new Bundle{
    val in  = Flipped(new FeedBack)
    val out = Output(new signalEntry)     // output control signal

    val work = Input(Bool())
    val end = Input(Bool())
  })

  val (sig, int, r, ir, ben, psr, out) = (io.in.sig, io.in.int, io.in.r, io.in.ir, io.in.ben, io.in.psr, io.out)
  val state = RegInit(0.U(6.W))

  val signalTable = VecInit(
    "b00000000000_00000000_000000000000000_00000".U,
    "b00001100000_00100000_000001000000000_00000".U,
    "b10000000000_00010000_000000010001000_00000".U,
    "b10000000000_00010000_000000010001000_00000".U,
    "b00001000000_10000000_000100000000000_00000".U,
    "b00001100000_00100000_000001000000000_01000".U,
    "b10000000000_00010000_000001101001000_00000".U,
    "b10000000000_00010000_000001101001000_00000".U,
    "b10000000000_00100000_000010000000000_11000".U,
    "b00001100000_00100000_000001000000000_10000".U,
    "b10000000000_00010000_000000010001000_00000".U,
    "b10000000000_00010000_000000010001000_00000".U,
    "b00000010000_00000000_100001100000000_00000".U,
    "b01000001001_00000010_000000000000100_00000".U,
    "b00001100000_00010000_000000010001000_00000".U,
    "b10000000000_00010000_000000000000000_00000".U,
    "b00000000000_00000000_000000000000000_00110".U,
    "b00000000000_00000000_000000000000000_00000".U,
    "b10000010000_10000000_000000000000000_00000".U,
    "b00000000000_00000000_000000000000000_00000".U,
    "b00001010000_10000000_100101100000000_00000".U,
    "b00000010000_00000000_100000011000000_00000".U,
    "b00000010000_00000000_100000010000000_00000".U,
    "b01000000000_00100000_000000000000000_11000".U,
    "b01000000000_00000000_000000000000000_00100".U,
    "b01000000000_00000000_000000000000000_00100".U,
    "b10000000000_01000000_000000000000000_00000".U,
    "b00001100000_01000000_000000000000000_00000".U,
    "b01001000000_10000000_000100000000000_00100".U,
    "b01000000000_00000000_000000000000000_00100".U,
    "b00000010000_01000000_010000000000000_00000".U,
    "b10000000000_01000000_000000000000000_00000".U,
    "b00010000000_00000000_000000000000000_00000".U,
    "b01000000000_00000000_000000000000000_00100".U,
    "b00001000000_00000001_001010000000000_00000".U,
    "b00100000000_01000000_000000000000000_00000".U,
    "b01000000000_00000000_000000000000000_00100".U,
    "b10001000000_00000001_001010000010000_00000".U,
    "b00000010000_01000000_010000000000000_00000".U,
    "b10001000000_00000001_001010000000000_00000".U,
    "b01000000000_00000000_000000000000000_00100".U,
    "b00000000000_00000000_000000000000001_00110".U,
    "b00000101000_01000000_000000000000000_00000".U,
    "b01000000000_00000100_000000000000000_00000".U,
    "b01000001001_00000010_000000000000010_00000".U,
    "b00001000010_00000001_001010000100000_00000".U,
    "b00000000000_00000000_000000000000000_00000".U,
    "b10001000000_00000001_001010000100000_00000".U,
    "b00000000000_00000000_000000000000000_00110".U,
    "b01000001001_00000010_000000000000000_00000".U,
    "b10000000000_00001000_000000000000000_00000".U,
    "b00000000000_00000000_000000000000000_00000".U,
    "b01000000000_00000000_000000000000000_00100".U,
    "b00000000000_00000000_000000000000000_00000".U,
    "b00000010000_01000000_010000000000000_00000".U,
    "b00000000000_00000000_000000000000000_00000".U,
    "b00000000000_00000000_000000000000000_00000".U,
    "b00000000000_00000000_000000000000000_00000".U,
    "b00000000000_00000000_000000000000000_00000".U,
    "b00001000100_00000001_001010000110000_00000".U,
    "b00000000000_00000000_000000000000000_00000".U,
    "b00000000000_00000000_000000000000000_00000".U,
    "b00000000000_00000000_000000000000000_00000".U,
    "b00000000000_00000000_000000000000000_00000".U
  )

  // lab3-task1 
  // 请在下方填写 1~59的状态转移, 其中17 19 46 53 55~58 没有对应状态
  when(io.work && !io.end){
    switch (state) {            // 控制状态机
      // 此处为示例: 当前状态为0, 下一状态根据ben信号转移，若为真，则下一状态为22，否则为18 
      is (0.U) { state := Mux(ben, 22.U, 18.U) }

    }
  }

  out := signalTable(state).asTypeOf(new signalEntry)
}
